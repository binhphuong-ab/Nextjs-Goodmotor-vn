// Next.js helper type for defining route metadata
// This provides TypeScript autocompletion for SEO-related metadata
import type { Metadata } from 'next'

// Google Font utility from Next.js 13+ for self-hosting/optimised font loading
// Next.js automatically downloads the font files and serves them locally
// This improves performance and privacy compared to loading from Google Fonts CDN
import { Inter } from 'next/font/google'

// Global stylesheet that applies Tailwind base/reset and custom utilities
// This CSS file is loaded once and applies to the entire application
import './globals.css'

// Shared UI components rendered on every page
// These components will appear on ALL pages that use this layout
import Navbar from '@/components/Navbar'
import Footer from '@/components/Footer'

// Load the Inter font with latin subset; Next.js will automatically include the
// correct <link preload> tags in the document head and generate a CSS class
// The 'subsets' option reduces the font file size by only including needed characters
const inter = Inter({ subsets: ['latin'] })

// Page-level metadata that will be injected into <head> for all routes under
// this layout. Helps SEO and social sharing.
// This metadata will be inherited by all child pages unless they override it
export const metadata: Metadata = {
  title: 'Good Motor - Industrial Vacuum Pumps & Solutions',
  description: 'Leading provider of high-quality vacuum pumps and industrial solutions. Trusted by professionals worldwide.',
  keywords: 'vacuum pumps, industrial equipment, motor solutions',
}

// ROOT LAYOUT COMPONENT
// This is the top-level layout that wraps ALL pages in the application
// In Next.js App Router, this replaces the old _app.js and _document.js files
export default function RootLayout({
  // `children` is the currently rendered page (Server Component) that will be
  // wrapped by this layout. Every route inside the `app/` directory inherits
  // this structure automatically based on file-system routing
  children,
}: {
  // TypeScript interface defining that children must be a valid React element
  children: React.ReactNode
}) {
  return (
    // The root HTML element - this is the complete HTML document structure
    <html lang="en">
      {/* Apply the Inter font to the entire document via generated className */}
      {/* The inter.className contains the CSS class name generated by Next.js */}
      <body className={inter.className}>
        {/* PERSISTENT NAVIGATION */}
        {/* This navbar appears on every single page of the application */}
        <Navbar />
        
        {/* MAIN CONTENT AREA */}
        {/* This is where individual page content gets rendered */}
        {/* min-h-screen ensures full viewport height even on short pages */}
        <main className="min-h-screen">
          {/* DYNAMIC PAGE CONTENT */}
          {/* This is where page.tsx, about/page.tsx, contact/page.tsx, etc. get injected */}
          {/* Next.js automatically passes the current page as the 'children' prop */}
          {children}
        </main>
        
        {/* PERSISTENT FOOTER */}
        {/* This footer appears on every single page of the application */}
        <Footer />
      </body>
    </html>
  )
} 

/*
KEY NEXT.JS APP ROUTER CONCEPTS:

1. LAYOUT HIERARCHY:
   - This root layout wraps ALL pages in the app
   - You can have nested layouts in subdirectories
   - Each layout.tsx file applies to its directory and subdirectories

2. SERVER COMPONENTS:
   - By default, all components in App Router are Server Components
   - They render on the server, reducing client-side JavaScript
   - Better performance and SEO compared to client-side rendering

3. METADATA API:
   - Replaces the old Head component from Next.js 12
   - Automatically generates proper HTML meta tags
   - Supports dynamic metadata based on page content

4. FONT OPTIMIZATION:
   - Next.js automatically optimizes Google Fonts
   - Downloads font files at build time
   - Eliminates render-blocking requests and layout shift

5. FILE-SYSTEM ROUTING:
   - No need to configure routes manually
   - Each page.tsx file automatically becomes a route
   - layout.tsx files define shared UI for route segments
*/ 